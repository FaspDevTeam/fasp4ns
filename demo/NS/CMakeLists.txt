# This file is automatically generated by running
#
#     cmake/scripts/generate-cmakefiles
#
# This file uses relative directories. Should be used in the current directory. 
#
# Require CMake 2.8 or later
cmake_minimum_required(VERSION 2.8)

set(PROJECT_NAME test_ns)
project(${PROJECT_NAME})

# Set verbose output while testing CMake
#set(CMAKE_VERBOSE_MAKEFILE 1)

# Set CMake behavior
cmake_policy(SET CMP0004 NEW)

# Get DOLFIN configuration data (DOLFINConfig.cmake must be in
# DOLFIN_CMAKE_CONFIG_PATH)
find_package(DOLFIN REQUIRED)

if (EXISTS ${DOLFIN_USE_FILE})
  include(${DOLFIN_USE_FILE})

  # Default build type (can be overridden by user)
  if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING
      "Choose the type of build, options are: Debug MinSizeRel Release RelWithDebInfo." FORCE)
  endif()
else()
  # Compiler definitions
  add_definitions(${DOLFIN_CXX_DEFINITIONS})
  
  # Compiler flags
  set(CMAKE_CXX_FLAGS "${DOLFIN_CXX_FLAGS} ${CMAKE_CXX_FLAGS}")

  # Include directories
  include_directories(${DOLFIN_INCLUDE_DIRS})
  include_directories(SYSTEM ${DOLFIN_3RD_PARTY_INCLUDE_DIRS})
endif()

LINK_DIRECTORIES(../../../faspsolver/lib ../../lib)
include_directories(../../include  ../../../faspsolver/base/include ../)

# Executable
add_executable(${PROJECT_NAME} main.cpp fasp_solver.cpp)

# Target libraries
target_link_libraries(${PROJECT_NAME} ${DOLFIN_LIBRARIES} libfasp4ns.a libfasp.a)
#add_definitions("-lmkl_intel_lp64 -lmkl_core -lmkl_intel_thread -lpthread -lm -lmkl_blacs_intelmpi_lp64")
